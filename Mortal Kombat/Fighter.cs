namespace MortalKombat
{
    // –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –±–æ–π—Ü–æ–≤
    abstract class Fighter
    {
        private const int MaxMeter = 100; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è XRAY –∏ Fatality
        private int xrayCounter; // –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å XRAY

        // –ü—É–±–ª–∏—á–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –±–æ–π—Ü–∞
        public string Name { get; } // –ò–º—è –±–æ–π—Ü–∞. –≠—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è. –ü–æ—ç—Ç–æ–º—É set –Ω–µ –Ω—É–∂–µ–Ω
        public int MaxHp { get; } // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
        public int Hp { get; private set; } // –¢–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ. –¢–æ–ª—å–∫–æ –µ–º—É –ø—Ä–∏–ø–∏—Å–∞–ª private set –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –º–µ–Ω—è–µ—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –±–æ—è
                                          // –∞ private —á—Ç–æ–±—ã –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç—å –º–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤–Ω–µ –∫–ª–∞—Å—Å–∞
        public int Attack { get; } // –°–∏–ª–∞ –∞—Ç–∞–∫–∏
        public int Defence { get; } // –£—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã

        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ–π—Ü–∞
        protected Fighter(string name, int hp, int attack, int defence)
        {
            Name = name;
            MaxHp = hp;
            Hp = hp;
            Attack = attack;
            Defence = defence;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –±–æ–µ—Ü
        public bool IsAlive
        {
            get { return Hp > 0; } 
        }

        // –ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å XRAY
        public bool CanXRay
        {
            get { return xrayCounter >= MaxMeter; }
        }

        // –ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Fatality (–∫–æ–≥–¥–∞ –º—ë—Ä—Ç–≤ –∏ —à–∫–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞)
         public bool CanFatality
        {
            get { return !IsAlive; }
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
        public void ReceiveDamage(int dmg)
        {
            int trueDmg = dmg - Defence;  // –í—ã—á–∏—Ç—ã–≤–∞—é –∑–∞—â–∏—Ç—É –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–Ω–∞ 

            // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –∑–∞—â–∏—Ç—ã —É—Ä–æ–Ω —Å—Ç–∞–ª –º–µ–Ω—å—à–µ –Ω—É–ª—è —Ç–æ –æ–±–Ω—É–ª—è—é –µ–≥–æ
            if (trueDmg < 0) trueDmg = 0;

            // –û—Ç–Ω–∏–º–∞—é —É—Ä–æ–Ω –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
            Hp -= trueDmg;

            // –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ –Ω—É–ª—è —Ç–æ –æ–±–Ω—É–ª—è—é –µ–≥–æ
            if (Hp < 0) Hp = 0;
        }

        // –ó–∞—Ä—è–¥–∫–∞ XRAY
        public void ChargeXRay(int xray)
        {
            xrayCounter += xray;
            if (xrayCounter > MaxMeter)
            {
                xrayCounter = MaxMeter; // –°—Ç–∞–≤–∏–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –±–æ–ª—å—à–µ 100
            }
        }

        // –û–±–Ω—É–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–æ–≤ —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—ã–ª–æ –æ–±–Ω—É–ª–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ
        public void ResetXRay() // –û–±–Ω—É–ª—è–µ–º XRAY
        {
            xrayCounter = 0;
        } 

        // –ì—Ä–∞—Ñ–∏–∫—É —Å–¥–µ–ª–∞–ª gpt. –¢—É—Ç —É–∂–µ –≤–æ–æ–±—â–µ –±–µ–∑ –ø–æ–Ω—è—Ç–∏—è –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å.
        public string DrawHp() => DrawBar(Hp, MaxHp, 20, '‚ñà'); // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ HP
        public string DrawXRay() => DrawBar(xrayCounter, MaxMeter, 10, '#'); // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ XRAY

        // –¢—É—Ç –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–ª–æ—Å–æ–∫ HP –∏ XRAY 
        private static string DrawBar(int value, int max, int width, char fill)
        {
            int filled = (int)Math.Round((double)value / max * width); // –°–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞–ø–æ–ª–Ω–∏—Ç—å
            return "[" + new string(fill, filled) + new string(' ', width - filled) + "]"; // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏
        }

        public abstract void DrawFace(); // –ü–∏—à—É –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º –¥–ª—è –±—É–¥—É—â–µ–≥–æ –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞ 

        // XRAY –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        public virtual int PerformXRay()
        {
            Console.WriteLine($"{Name} performs XRAY!!!");
            ResetXRay();
            return Attack * 2; // –£–¥–≤–æ–µ–Ω–Ω—ã–π —É—Ä–æ–Ω
        }

        // Fatality –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        public virtual void PerformFatality(Fighter loser) // –°–æ–∑–¥–∞—é loser —á—Ç–æ–±—ã –≤ –±—É–¥—É—â–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å —Ç—É–¥–∞ –∏–º—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –±–æ–π—Ü–∞
        {
            if (CanFatality) // –ï—Å–ª–∏ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å Fatality
            {
                Console.WriteLine($"{Name} performs FATALITY on {loser.Name}!!! üíÄ");
            }
        }
    }
}